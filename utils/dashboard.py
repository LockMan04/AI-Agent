"""
Dashboard and metrics utilities
"""
import streamlit as st
import glob
import os
from datetime import datetime, timedelta
from typing import Dict, List


def display_dashboard_metrics():
    """
    Hi·ªÉn th·ªã dashboard v·ªõi metrics t·ªïng quan
    """
    st.markdown("---")
    st.markdown("### üìä Dashboard T·ªïng quan")
    
    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ files
        report_files = glob.glob(os.path.join("reports", "meeting_prep_*.md"))
        
        if not report_files:
            st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã dashboard")
            return
        
        # Ph√¢n t√≠ch d·ªØ li·ªáu
        total_meetings = len(report_files)
        recent_meetings = get_recent_meetings_count(report_files, days=7)
        companies = get_unique_companies(report_files)
        avg_prep_time = estimate_avg_prep_time(report_files)
        
        # Hi·ªÉn th·ªã metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üìä T·ªïng cu·ªôc h·ªçp",
                value=total_meetings,
                delta=f"+{recent_meetings} tu·∫ßn n√†y"
            )
        
        with col2:
            st.metric(
                label="üè¢ S·ªë c√¥ng ty",
                value=len(companies),
                help="S·ªë l∆∞·ª£ng c√¥ng ty ƒë√£ l√†m vi·ªác"
            )
        
        with col3:
            st.metric(
                label="‚è±Ô∏è Th·ªùi gian chu·∫©n b·ªã TB",
                value=f"{avg_prep_time} ph√∫t",
                help="Th·ªùi gian trung b√¨nh ƒë·ªÉ chu·∫©n b·ªã m·ªôt cu·ªôc h·ªçp"
            )
        
        with col4:
            success_rate = calculate_success_rate(report_files)
            st.metric(
                label="‚úÖ T·ª∑ l·ªá th√†nh c√¥ng",
                value=f"{success_rate}%",
                help="T·ª∑ l·ªá cu·ªôc h·ªçp ƒë∆∞·ª£c chu·∫©n b·ªã th√†nh c√¥ng"
            )
        
        # Charts
        display_meeting_trends(report_files)
        display_company_distribution(companies)
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi hi·ªÉn th·ªã dashboard: {e}")


def get_recent_meetings_count(files: List[str], days: int = 7) -> int:
    """
    ƒê·∫øm s·ªë cu·ªôc h·ªçp trong N ng√†y g·∫ßn ƒë√¢y
    
    Args:
        files: Danh s√°ch file paths
        days: S·ªë ng√†y ƒë·ªÉ t√≠nh
        
    Returns:
        int: S·ªë cu·ªôc h·ªçp g·∫ßn ƒë√¢y
    """
    try:
        cutoff_date = datetime.now() - timedelta(days=days)
        count = 0
        
        for file in files:
            try:
                file_time = datetime.fromtimestamp(os.path.getmtime(file))
                if file_time >= cutoff_date:
                    count += 1
            except (OSError, ValueError):
                continue
                
        return count
        
    except Exception:
        return 0


def get_unique_companies(files: List[str]) -> List[str]:
    """
    L·∫•y danh s√°ch c√¥ng ty unique t·ª´ t√™n files
    
    Args:
        files: Danh s√°ch file paths
        
    Returns:
        List[str]: Danh s√°ch t√™n c√¥ng ty
    """
    companies = set()
    
    for file in files:
        try:
            filename = os.path.basename(file)
            parts = filename.split('_')
            
            if len(parts) >= 3:
                company = parts[2]  # meeting_prep_{company}_{date}.md
                companies.add(company)
                
        except (IndexError, AttributeError):
            continue
    
    return list(companies)


def estimate_avg_prep_time(files: List[str]) -> int:
    """
    ∆Ø·ªõc t√≠nh th·ªùi gian chu·∫©n b·ªã trung b√¨nh
    
    Args:
        files: Danh s√°ch file paths
        
    Returns:
        int: Th·ªùi gian trung b√¨nh (ph√∫t)
    """
    # ƒê√¢y l√† ∆∞·ªõc t√≠nh d·ª±a tr√™n ƒë·ªô ph·ª©c t·∫°p file
    # Trong th·ª±c t·∫ø c√≥ th·ªÉ track th·ªùi gian th·ª±c
    
    try:
        total_complexity = 0
        valid_files = 0
        
        for file in files:
            try:
                file_size = os.path.getsize(file)
                # ∆Ø·ªõc t√≠nh: file l·ªõn h∆°n = chu·∫©n b·ªã l√¢u h∆°n
                complexity = min(file_size // 1000, 10)  # Max 10 points
                total_complexity += complexity
                valid_files += 1
                
            except OSError:
                continue
        
        if valid_files == 0:
            return 45  # Default estimate
        
        avg_complexity = total_complexity / valid_files
        estimated_time = int(30 + (avg_complexity * 5))  # 30-80 minutes range
        
        return estimated_time
        
    except Exception:
        return 45  # Default fallback


def calculate_success_rate(files: List[str]) -> int:
    """
    T√≠nh t·ª∑ l·ªá th√†nh c√¥ng d·ª±a tr√™n vi·ªác c√≥ file hay kh√¥ng
    
    Args:
        files: Danh s√°ch file paths
        
    Returns:
        int: T·ª∑ l·ªá ph·∫ßn trƒÉm
    """
    try:
        valid_files = 0
        
        for file in files:
            try:
                if os.path.exists(file) and os.path.getsize(file) > 100:  # Min file size
                    valid_files += 1
            except OSError:
                continue
        
        if len(files) == 0:
            return 100
            
        success_rate = int((valid_files / len(files)) * 100)
        return success_rate
        
    except Exception:
        return 100


def display_meeting_trends(files: List[str]):
    """
    Hi·ªÉn th·ªã xu h∆∞·ªõng cu·ªôc h·ªçp theo th·ªùi gian
    
    Args:
        files: Danh s√°ch file paths
    """
    try:
        st.markdown("#### üìà Xu h∆∞·ªõng cu·ªôc h·ªçp")
        
        # Group by date
        date_counts = {}
        
        for file in files:
            try:
                file_time = datetime.fromtimestamp(os.path.getmtime(file))
                date_key = file_time.strftime('%Y-%m-%d')
                date_counts[date_key] = date_counts.get(date_key, 0) + 1
                
            except (OSError, ValueError):
                continue
        
        if date_counts:
            # Simple text display (c√≥ th·ªÉ d√πng chart library sau)
            recent_dates = sorted(date_counts.keys())[-7:]  # Last 7 days
            
            cols = st.columns(len(recent_dates) if recent_dates else 1)
            
            for i, date in enumerate(recent_dates):
                if i < len(cols):
                    with cols[i]:
                        formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d/%m')
                        st.metric(formatted_date, date_counts[date])
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu xu h∆∞·ªõng")
            
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ hi·ªÉn th·ªã xu h∆∞·ªõng: {e}")


def display_company_distribution(companies: List[str]):
    """
    Hi·ªÉn th·ªã ph√¢n b·ªë c√¥ng ty
    
    Args:
        companies: Danh s√°ch t√™n c√¥ng ty
    """
    try:
        st.markdown("#### üè¢ Ph√¢n b·ªë c√¥ng ty")
        
        if companies:
            # Count company frequency
            company_counts = {}
            for company in companies:
                company_counts[company] = company_counts.get(company, 0) + 1
            
            # Sort by frequency
            sorted_companies = sorted(company_counts.items(), key=lambda x: x[1], reverse=True)
            
            # Display top companies
            for company, count in sorted_companies[:5]:
                progress_value = count / max(company_counts.values()) if company_counts.values() else 0
                st.markdown(f"**{company}**: {count} cu·ªôc h·ªçp")
                st.progress(progress_value)
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng ty")
            
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ hi·ªÉn th·ªã ph√¢n b·ªë c√¥ng ty: {e}")


def display_system_health():
    """
    Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng
    """
    st.markdown("---")
    st.markdown("### üîß Tr·∫°ng th√°i h·ªá th·ªëng")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Check reports directory
        reports_exist = os.path.exists("reports")
        st.metric(
            "üìÅ Th∆∞ m·ª•c Reports", 
            "‚úÖ OK" if reports_exist else "‚ùå L·ªói"
        )
    
    with col2:
        # Check config
        try:
            from ..config import Config
            api_keys_valid = Config.validate_api_keys()
            st.metric(
                "üîë API Keys",
                "‚úÖ OK" if api_keys_valid else "‚ùå Thi·∫øu"
            )
        except:
            st.metric("üîë API Keys", "‚ùå L·ªói")
    
    with col3:
        # Check disk space (simplified)
        try:
            import shutil
            total, used, free = shutil.disk_usage(".")
            free_gb = free // (1024**3)
            st.metric(
                "üíæ Dung l∆∞·ª£ng c√≤n l·∫°i",
                f"{free_gb} GB"
            )
        except:
            st.metric("üíæ Dung l∆∞·ª£ng", "‚ùì Kh√¥ng x√°c ƒë·ªãnh")
