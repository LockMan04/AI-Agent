"""
File management utilities
"""
import datetime
import os
import streamlit as st
from pathlib import Path


def save_meeting_result(result, company_name):
    """
    L∆∞u k·∫øt qu·∫£ cu·ªôc h·ªçp v√†o file
    
    Args:
        result: K·∫øt qu·∫£ t·ª´ AI agents
        company_name (str): T√™n c√¥ng ty
    
    Returns:
        str: T√™n file ƒë√£ l∆∞u
    
    Raises:
        OSError: N·∫øu kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c ho·∫∑c ghi file
    """
    try:
        # T·∫°o th∆∞ m·ª•c reports n·∫øu ch∆∞a c√≥
        report_dir = Path("reports")
        report_dir.mkdir(exist_ok=True)
        
        # T·∫°o t√™n file an to√†n
        safe_company_name = "".join(c for c in company_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        timestamp = datetime.datetime.now().strftime('%d%m%Y_%H%M%S')
        filename = report_dir / f"meeting_prep_{safe_company_name}_{timestamp}.md"
        
        # Ghi file
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"# Chu·∫©n b·ªã cu·ªôc h·ªçp - {company_name}\n")
            f.write(f"**Ng√†y t·∫°o:** {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
            f.write(str(result))
        
        return str(filename)
        
    except OSError as e:
        st.error(f"‚ùå L·ªói khi l∆∞u file: {e}")
        return None


def create_download_button(filename, company_name):
    """
    T·∫°o button download file
    
    Args:
        filename (str): ƒê∆∞·ªùng d·∫´n file
        company_name (str): T√™n c√¥ng ty
    """
    try:
        if filename and os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
            
            st.download_button(
                label="üì• T·∫£i xu·ªëng b√°o c√°o",
                data=content,
                file_name=f"meeting_prep_{company_name}_{datetime.datetime.now().strftime('%d%m%Y')}.md",
                mime="text/markdown"
            )
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫°o download button: {e}")


def get_report_files(limit=5):
    """
    L·∫•y danh s√°ch file b√°o c√°o g·∫ßn nh·∫•t
    
    Args:
        limit (int): S·ªë l∆∞·ª£ng file t·ªëi ƒëa
        
    Returns:
        list: Danh s√°ch file paths
    """
    try:
        import glob
        pattern = os.path.join("reports", "meeting_prep_*.md")
        files = sorted(glob.glob(pattern), key=os.path.getmtime, reverse=True)
        return files[:limit]
    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y danh s√°ch file: {e}")
        return []


def clean_old_reports(max_files=10):
    """
    D·ªçn d·∫πp c√°c file b√°o c√°o c≈©
    
    Args:
        max_files (int): S·ªë file t·ªëi ƒëa gi·ªØ l·∫°i
    """
    try:
        files = get_report_files(limit=100)  # L·∫•y t·∫•t c·∫£
        if len(files) > max_files:
            for file_to_delete in files[max_files:]:
                os.remove(file_to_delete)
            st.info(f"üßπ ƒê√£ d·ªçn d·∫πp {len(files) - max_files} file b√°o c√°o c≈©")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp file: {e}")
