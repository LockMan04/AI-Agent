import streamlit as st
from crewai import Crew, LLM
from crewai.process import Process

# Import c√°c modules t·ª± t·∫°o
try:
    from config_enhanced import Config, ConfigError
except ImportError:
    from config import Config
    ConfigError = Exception

from agents import create_agents
from tasks import create_tasks
from utils import (
    save_meeting_result, 
    display_meeting_history, 
    display_metrics, 
    validate_inputs,
    display_sidebar_instructions,
    create_download_button,
    display_crew_progress,
    display_agent_details,
    display_fun_facts
)
from utils.security import SecurityValidator, InputValidator, log_security_event

# Streamlit app setup
st.set_page_config(page_title=Config.PAGE_TITLE, layout=Config.PAGE_LAYOUT)
st.title(Config.PAGE_TITLE)

# Security: Rate limiting
if not SecurityValidator.check_rate_limit("main_page_access", max_requests=50, time_window=3600):
    st.error("‚ùå Qu√° nhi·ªÅu requests. Vui l√≤ng th·ª≠ l·∫°i sau.")
    st.stop()

# Check if all API keys are set
try:
    if Config.validate_api_keys():
        # Set API keys as environment variables
        Config.set_environment_variables()
        # Ensure required directories exist
        Config.ensure_directories()
    else:
        st.stop()  # Stop execution if API keys are missing
except ConfigError as e:
    st.stop()  # Error already displayed in validate_api_keys

    chatgpt = LLM(model=Config.MODEL_NAME, temperature=Config.MODEL_TEMPERATURE, api_key=Config.OPENAI_API_KEY)

    # Input fields v·ªõi security validation
    company_name = st.text_input("Nh·∫≠p t√™n c√¥ng ty:")
    if company_name:
        company_errors = InputValidator.validate_company_name(company_name)
        if company_errors:
            for error in company_errors:
                st.error(f"‚ùå {error}")
    
    meeting_objective = st.text_input("M·ª•c ƒë√≠ch cu·ªôc h·ªçp:")
    if meeting_objective:
        objective_errors = InputValidator.validate_meeting_objective(meeting_objective)
        if objective_errors:
            for error in objective_errors:
                st.error(f"‚ùå {error}")
    
    attendees = st.text_area("Nh·∫≠p ng∆∞·ªùi tham gia v√† vai tr√≤ c·ªßa h·ªç (m·ªôt ng∆∞·ªùi m·ªói d√≤ng):")
    if attendees:
        attendees_errors = InputValidator.validate_attendees_list(attendees)
        if attendees_errors:
            for error in attendees_errors:
                st.error(f"‚ùå {error}")
    
    meeting_duration = st.number_input(
        "Nh·∫≠p th·ªùi gian (ph√∫t):", 
        min_value=Config.MIN_MEETING_DURATION, 
        max_value=Config.MAX_MEETING_DURATION, 
        value=Config.DEFAULT_MEETING_DURATION, 
        step=Config.MEETING_DURATION_STEP
    )
    
    focus_areas = st.text_input("Nh·∫≠p m·ª•c ti√™u m√† c·∫ßn ƒë·∫°t ƒë∆∞·ª£c:")
    if focus_areas:
        # Validate focus areas length
        length_errors = Config.validate_input_lengths("", "", focus_areas)
        if length_errors:
            for error in length_errors:
                st.error(f"‚ùå {error}")
    
    # T√πy ch·ªçn hi·ªÉn th·ªã log chi ti·∫øt
    show_verbose = st.checkbox("üîç Hi·ªÉn th·ªã log chi ti·∫øt qu√° tr√¨nh", value=False)
    
    # Validation
    all_fields_filled = validate_inputs(company_name, meeting_objective, attendees, focus_areas)
    
    if not all_fields_filled:
        st.warning("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ th√¥ng tin tr∆∞·ªõc khi chu·∫©n b·ªã cu·ªôc h·ªçp")
    else:
        st.success("‚úÖ Th√¥ng tin ƒë√£ ƒë·∫ßy ƒë·ªß, s·∫µn s√†ng chu·∫©n b·ªã cu·ªôc h·ªçp!")

        # T·∫°o agents v√† tasks
        agents = create_agents(chatgpt)
        
        meeting_data = {
            'company_name': company_name,
            'meeting_objective': meeting_objective,
            'attendees': attendees,
            'meeting_duration': meeting_duration,
            'focus_areas': focus_areas
        }
        
        tasks = create_tasks(agents, meeting_data)

        # T·∫°o nh√≥m
        meeting_prep_crew = Crew(
            agents=list(agents.values()),
            tasks=tasks,
            verbose=show_verbose,
            process=Process.sequential
        )

    # Ch·∫°y nh√≥m khi ng∆∞·ªùi d√πng nh·∫•p v√†o n√∫t
    if st.button("üöÄ Chu·∫©n b·ªã cu·ªôc h·ªçp", disabled=not all_fields_filled, type="primary"):
        # Hi·ªÉn th·ªã chi ti·∫øt agents tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
        display_agent_details()
        
        # Hi·ªÉn th·ªã fun facts
        display_fun_facts()
        
        # Ch·∫°y crew v·ªõi progress display
        st.markdown("### üöÄ Ti·∫øn tr√¨nh chu·∫©n b·ªã cu·ªôc h·ªçp")
        result = display_crew_progress(meeting_prep_crew, meeting_data)
        
        st.success("‚úÖ ƒê√£ chu·∫©n b·ªã xong cu·ªôc h·ªçp!")
        st.markdown("---")
        st.markdown("### üìã K·∫øt qu·∫£ chu·∫©n b·ªã cu·ªôc h·ªçp")
        st.markdown(result)
        
        # L∆∞u k·∫øt qu·∫£ v√† t·∫°o download button
        filename = save_meeting_result(result, company_name)
        st.info(f"üìÅ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: {filename}")
        create_download_button(result, filename)

    # Hi·ªÉn th·ªã metrics dashboard
    display_metrics(meeting_duration, attendees, company_name)
    st.markdown("---")

    # Sidebar instructions and meeting history
    display_sidebar_instructions()
    display_meeting_history()

else:
    st.warning("ƒêang g·∫∑p v·∫•n ƒë·ªÅ v·ªõi API keys.")